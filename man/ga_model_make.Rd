% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/platform.R
\name{ga_model_make}
\alias{ga_model_make}
\title{Modelling function factory for Google Analytics data}
\usage{
ga_model_make(data_f, required_columns, model_f,
  required_packages = NULL, description = NULL,
  outputShiny = shiny::plotOutput, renderShiny = function(x)
  shiny::renderPlot(plot(x)))
}
\arguments{
\item{data_f}{A function that gets the data -
must have viewId as first argument}

\item{required_columns}{What dimensions and metrics are required}

\item{model_f}{A function that inputs gadata, and outputs a list of assets -
must take data from result of data_f in first argument.}

\item{required_packages}{The packages needed for data_f and model_f to work}

\item{description}{An optional description of what the model does}

\item{outputShiny}{A shiny UI output function that will display the results renderShiny}

\item{renderShiny}{A shiny render function that will create the output for outputShiny from model_f}
}
\value{
A \code{ga_model} object to pass to \link{ga_model}
}
\description{
Create ga_model objects for easy application of models to data
}
\details{
The passed functions should all have \code{...} to make them flexible
  in what arguments can be added.  Do not have the same argument names in both functions.
}
\examples{

\dontrun{

 get_model_data <- function(viewId,
                           date_range = c(Sys.Date()- 300, Sys.Date()),
                           ...){
   google_analytics(viewId,
                    date_range = date_range,
                    metrics = "sessions",
                    dimensions = "date",
                    max = -1)
 }

 decompose_sessions <- function(df, ...){
   web_data_ts <- ts(df$sessions, frequency = 7)
   d <- decompose(web_data_ts)
   list(decom = d, plot = plot(d))
 }

 decomp_ga <- ga_model_make(get_model_data,
                            required_columns = c("date", "sessions"),
                            model_f = decompose_sessions,
                            description = "Performs decomposition on session data and creates a plot")

 # fetches data and outputs decomposition
 ga_model(81416156, decomp_ga)

 # save the model for later
 model_location <- "inst/models/decomp_ga.gamodel"
 ga_model_save(decomp_ga, filename = model_location)

 # can load model from file
 ga_model(81416156, model_location)

 # load model and use again
 model2 <- ga_model_load(model_location)

 ga_model(81416156, model2)

 # to use in Shiny, supply the output and render functions
 myRenderPlot <- function(x){
   # base plot needs to plot here, not in model_f as can't pass plot objects
   shiny::renderPlot(plot(x$decom))
 }

 decomp_ga <- ga_model_make(get_model_data,
                            required_columns = c("date", "sessions"),
                            model_f = decompose_sessions,
                            description = "Performs decomposition on session data and creates a plot",
                            outputShiny = shiny::plotOutput,
                            renderShiny = myRenderPlot)

}
}
\seealso{
Other GA modelling functions: \code{\link{ga_model_edit}},
  \code{\link{ga_model_load}}, \code{\link{ga_model_save}},
  \code{\link{ga_model}}
}
\concept{GA modelling functions}
