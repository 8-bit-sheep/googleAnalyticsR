% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_shiny_templates.R
\name{ga_model_shiny}
\alias{ga_model_shiny}
\title{Create a Shiny app from a ga_model file}
\usage{
ga_model_shiny(
  models,
  template = ga_model_shiny_template("template1"),
  title = "ga_model_shiny",
  auth_dropdown = c("ga4", "universal", "none"),
  web_json = Sys.getenv("GAR_CLIENT_WEB_JSON"),
  date_range = TRUE,
  scopes = "https://www.googleapis.com/auth/analytics.readonly",
  deployed_url = "",
  local_file = "",
  ui_f = ga_model_shiny_ui,
  ...
)
}
\arguments{
\item{models}{The \link{ga_model} file location ("my_model.gamr") or a \link{ga_model} object - can pass in multiple as a list}

\item{template}{The template file for the Shiny app}

\item{title}{The title of the Shiny app}

\item{auth_dropdown}{What type of account picker to include}

\item{web_json}{The client.id json file for Web}

\item{date_range}{Most templates support a {{ date_range }} global input for the data import functions, set this to FALSE to remove it}

\item{scopes}{The scope the API requests will be under}

\item{deployed_url}{If deploying Shiny app to a server, put the URL of the deployed app here so the authentication will redirect to the correct place}

\item{local_file}{If not empty, will not launch Shiny app but write code to the file location you put here}

\item{ui_f}{A function to generate the UI from the models list argument - default is \link{ga_model_shiny_ui}}

\item{...}{Extra macro variables the template may support: a named list with the name being a template variable}
}
\description{
Create a Shiny app from a ga_model file
}
\examples{

\dontrun{

# a universal analytics model
ga_model_shiny(
  ga_model_example("decomp_ga.gamr"), auth_dropdown = "universal",
  template = ga_model_shiny_template("template_ua.R"))

# multiple models
m3 <- ga_model_example("time-normalised.gamr")
m4 <- ga_model_example("ga-effect.gamr")

# launch in gentelella template
ga_model_shiny(list(m4, m3), auth_dropdown = "universal",
              template = ga_model_shiny_template("gentelella.R"))

# custom shinydashboard template              
## make a function to output the custom shinydashboard tabs
shinydashboard_ui_menu <- function(models){
  model_n <- paste0("model", seq_along(models)) 
  labels <- lapply(models, function(x) substr(x$description, 0,14))
  
  f <- function(model_n, label){
  paste(sprintf("menuItem('\%s', tabName = '\%s')", 
        label, model_n), collapse = ",\n")}
 
  mapply(f, model_n, labels, SIMPLIFY = FALSE, USE.NAMES = FALSE)
}

## supply custom function for wrapping the model_ui output with tabItem()
shinydashboard_ui <- function(model_n){
   paste(sprintf("tabItem(tabName = '\%s',\%s$ui('\%s'))", 
         model_n, model_n, model_n),collapse = ",\n")}
         
m3 <- ga_model_example("time-normalised.gamr")
m4 <- ga_model_example("ga-effect.gamr")
models <- list(m3, m4)

## launch shiny app with the models in each tab
## model_tabs is via ... and a custom macro in the shinydashboard template
ga_model_shiny(models, auth_dropdown = "universal", 
     template = ga_model_shiny_template("shinydashboard.R"), 
     ui_f = shinydashboard_ui, 
     model_tabs = shinydashboard_ui_menu(models))
}
}
\seealso{
Other GA modelling functions: 
\code{\link{ga_model_edit}()},
\code{\link{ga_model_example}()},
\code{\link{ga_model_load}()},
\code{\link{ga_model_make}()},
\code{\link{ga_model_save}()},
\code{\link{ga_model_shiny_template}()},
\code{\link{ga_model_shiny_ui}()},
\code{\link{ga_model_write}()},
\code{\link{ga_model}()}
}
\concept{GA modelling functions}
