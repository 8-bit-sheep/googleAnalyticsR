{
  "name": "googleAnalyticsR",
  "tagline": "A new Google Analytics R library using googleAuthR and v4 of the reporting API",
  "body": "# googleAnalyticsR\r\n[![Travis-CI Build Status](https://travis-ci.org/MarkEdmondson1234/googleAnalyticsR.svg?branch=master)](https://travis-ci.org/MarkEdmondson1234/googleAnalyticsR)\r\n\r\nA new Google Analytics R library using the new v4 of the Google Analytics Reporting API.  Built using [`googleAuthR`](https://github.com/MarkEdmondson1234/googleAuthR). The successor to [`shinyga`](https://github.com/MarkEdmondson1234/shinyga) it allows online OAuth2 authentication within Shiny apps, along with new features such as batching and compatibility with other Google APIs.\r\n\r\n## Other GA R libraries\r\n\r\nThese are all great libraries, that I have taken inspiration from.\r\n\r\n* [rga](https://github.com/skardhamar/rga)\r\n* [RGA](https://bitbucket.org/unikum/rga)\r\n* [RGoogleAnalytics](https://github.com/Tatvic/RGoogleAnalytics)\r\n* [ganalytics](https://github.com/jdeboer/ganalytics)\r\n* [GAR](https://github.com/andrewgeisler/GAR)\r\n\r\n## Why do we need another GA library?\r\n\r\n* First Google Analytics Reporting v4 API library for R\r\n* v4 features include: dynamic calculated metrics, pivots, histograms, date comparisons, batching.\r\n* Shiny App compatible\r\n* The same authentication flow can be used with other `googleAuthR` apps like [`searchConsoleR`](https://github.com/MarkEdmondson1234/searchConsoleR)\r\n* Automatic batching, sampling avoidance with daily walk, multi-account fetching, multi-channel funnnel\r\n* Support for `googleAuthR` batch, meaning 10 calls at once to GA - great for big fetches.  For big data calls this is implemented automatically so could be 10x quicker than normal GA fetching\r\n* Meta data included in attributes of returned dataframe including date ranges, totals, min and max\r\n\r\n## Install\r\n\r\nDevelopment version - needs version > `0.2.0.9000` of `googleAuthR` too until the latest changes are on CRAN\r\n\r\n```\r\ndevtools::install_github(\"MarkEdmondson1234/googleAuthR\")\r\ndevtools::install_github(\"MarkEdmondson1234/googleAnalyticsR\")\r\n```\r\n\r\n## To use - v4 API calls\r\n\r\nTodo.  But check out `?google_analytics_4` and these example queries:\r\n\r\n```r\r\n## setup\r\nlibrary(googleAnalyticsR)\r\n\r\n## authenticate, or use the RStudio Addin \"Google API Auth\" with analytics scopes set\r\nga_auth()\r\n\r\n## get your accounts\r\naccount_list <- google_analytics_account_list()\r\n\r\n## pick a profile with data to query\r\nga_id <- account_list[23,'viewId']\r\n\r\n```\r\n\r\n### New Filter Syntax\r\n\r\n```r\r\n## create filters on metrics\r\nmf <- met_filter(\"bounces\", \"GREATER_THAN\", 0)\r\nmf2 <- met_filter(\"sessions\", \"GREATER\", 2)\r\n\r\n## create filters on dimensions\r\ndf <- dim_filter(\"source\",\"BEGINS_WITH\",\"1\",not = TRUE)\r\ndf2 <- dim_filter(\"source\",\"BEGINS_WITH\",\"a\",not = TRUE)\r\n\r\n## construct filter objects\r\nfc2 <- filter_clause_ga4(list(df, df2), operator = \"AND\")\r\nfc <- filter_clause_ga4(list(mf, mf2), operator = \"AND\")\r\n\r\n## make v4 request\r\n## demo showing how the new filters work\r\nga_data1 <- google_analytics_4(ga_id, \r\n                              date_range = c(\"2015-07-30\",\"2015-10-01\"),\r\n                              dimensions=c('source','medium'), \r\n                              metrics = c('sessions','bounces'), \r\n                              met_filters = fc, \r\n                              dim_filters = fc2, \r\n                              filtersExpression = \"ga:source!=(direct)\")\r\n\r\nga_data1\r\n\r\n#                     source   medium sessions bounces\r\n# 1                  baby.dk referral        3       2\r\n# 2                     bing  organic       71      42\r\n# 3  buttons-for-website.com referral        7       7\r\n# 4           duckduckgo.com referral        5       3\r\n# 5                   google  organic      642     520\r\n# 6                google.se referral        3       2\r\n# 7                 izito.se referral        3       1\r\n# 8          success-seo.com referral       35      35\r\n# 9    video--production.com referral       11      11\r\n# 10                   yahoo  organic       66      43\r\n# 11              zapmeta.se referral        6       4\r\n``` \r\n\r\n\r\n### Querying multiple report types at a time\r\n\r\nExample with two date ranges and two reports.\r\n\r\n\r\n```r\r\n## demo of querying two date ranges at a time   \r\n## we make the request via make_ga_4_req() to use in next demo\r\nmultidate_test <- make_ga_4_req(ga_id, \r\n                                date_range = c(\"2015-07-30\",\r\n                                               \"2015-10-01\",\r\n                                               \"2014-07-30\",\r\n                                               \"2014-10-01\"),\r\n                                dimensions = c('source','medium'), \r\n                                metrics = c('sessions','bounces'))\r\n                                \r\nga_data2 <- fetch_google_analytics_4(multidate_test)\r\nga_data2\r\n#                     source   medium sessions.d1 bounces.d1 sessions.d2 bounces.d2\r\n# 1                  baby.dk referral           3          2           6          3\r\n# 2                     bing  organic          71         42         217        126\r\n# 3  buttons-for-website.com referral           7          7           0          0\r\n# 4           duckduckgo.com referral           5          3           0          0\r\n# 5                   google  organic         642        520        1286        920\r\n# 6                google.se referral           3          2          12          9\r\n# 7                 izito.se referral           3          1           0          0\r\n# 8          success-seo.com referral          35         35           0          0\r\n# 9    video--production.com referral          11         11           0          0\r\n# 10                   yahoo  organic          66         43         236        178\r\n# 11              zapmeta.se referral           6          4           9          4\r\n\r\n\r\n## Demo querying two reports at the same time\r\n## Use make_ga_4_req() to make multiple requests and then send \r\n##   them as a list to fetch_google_analytics_4()\r\nmulti_test2 <- make_ga_4_req(ga_id,\r\n                                date_range = c(\"2015-07-30\",\r\n                                               \"2015-10-01\",\r\n                                               \"2014-07-30\",\r\n                                               \"2014-10-01\"),\r\n                             dimensions=c('hour','medium'), \r\n                             metrics = c('visitors','bounces'))\r\n\r\n## all requests must have same viewID and dateRange\r\nga_data3 <- fetch_google_analytics_4(list(multidate_test, multi_test2)) \r\nga_data3\r\n# [[1]]\r\n#                     source   medium sessions.d1 bounces.d1 sessions.d2 bounces.d2\r\n# 1                  baby.dk referral           3          2           6          3\r\n# 2                     bing  organic          71         42         217        126\r\n# 3  buttons-for-website.com referral           7          7           0          0\r\n# 4           duckduckgo.com referral           5          3           0          0\r\n# 5                   google  organic         642        520        1286        920\r\n# 6                google.se referral           3          2          12          9\r\n# 7                 izito.se referral           3          1           0          0\r\n# 8          success-seo.com referral          35         35           0          0\r\n# 9    video--production.com referral          11         11           0          0\r\n# 10                   yahoo  organic          66         43         236        178\r\n# 11              zapmeta.se referral           6          4           9          4\r\n# \r\n# [[2]]\r\n#    hour   medium visitors.d1 bounces.d1 visitors.d2 bounces.d2\r\n# 1    00  organic          28         16          85         59\r\n# 2    00 referral           3          2           1          1\r\n# 3    01  organic          43         28          93         66\r\n\r\n\r\n```\r\n\r\n### On-the-fly calculated metrics\r\n\r\n\r\n```r\r\nga_data4 <- google_analytics_4(ga_id,\r\n                               date_range = c(\"2015-07-30\",\r\n                                              \"2015-10-01\"),\r\n                              dimensions=c('medium'), \r\n                              metrics = c(visitsPerVisitor = \"ga:visits/ga:visitors\",\r\n                                          'bounces'), \r\n                              metricFormat = c(\"FLOAT\",\"INTEGER\"))\r\nga_data4\r\n#     medium visitsPerVisitor bounces\r\n# 1   (none)         1.000000     117\r\n# 2  organic         1.075137     612\r\n# 3 referral         1.012500      71\r\n```\r\n\r\n### Segments v4\r\n\r\nSegments are more complex to configure that v3, but more powerful and in line to how you configure them in the UI\r\n\r\n```r\r\n## make a segment element\r\nse <- segment_element(\"sessions\", \r\n                      operator = \"GREATER_THAN\", \r\n                      type = \"metric\", \r\n                      comparisonValue = 1, \r\n                      scope = \"USER\")\r\n                      \r\nse2 <- segment_element(\"medium\", \r\n                      operator = \"EXACT\", \r\n                      type = \"dimension\", \r\n                      expressions = \"organic\")\r\n\r\n## choose between segment_vector_simple or segment_vector_sequence\r\n## Elements can be combined into clauses, which can then be combined into OR filter clauses\r\nsv_simple <- segment_vector_simple(list(list(se)))\r\n\r\nsv_simple2 <- segment_vector_simple(list(list(se2)))\r\n\r\n## Each segment vector can then be combined into a logical AND\r\nseg_defined <- segment_define(list(sv_simple, sv_simple2))\r\n\r\n## if only one AND definition, you can leave out wrapper list()\r\nseg_defined_one <- segment_define(sv_simple)\r\n\r\n\r\n## Each segement defintion can apply to users, sessions or both.\r\n## You can pass a list of several segments\r\nsegment4 <- segment_ga4(\"simple\", user_segment = seg_defined)\r\n\r\n## Add the segments to the segments param\r\nsegment_example <- google_analytics_4(ga_id, \r\n                                      c(\"2015-07-30\",\"2015-10-01\"), \r\n                                      dimensions=c('source','medium','segment'), \r\n                                      segments = segment4, \r\n                                      metrics = c('sessions','bounces')\r\n                                      )\r\n\r\nsegment_example\r\n#                            source   medium segment sessions bounces\r\n# 1                        24.co.uk referral  simple        1       1\r\n# 2                     aidsmap.com referral  simple        1       0\r\n# 3                             aol  organic  simple       30      19\r\n# 4                             ask  organic  simple       32      17\r\n\r\n\r\n## Sequence segment\r\n\r\nse2 <- segment_element(\"medium\", \r\n                       operator = \"EXACT\", \r\n                       type = \"dimension\", \r\n                       expressions = \"organic\")\r\n\r\nse3 <- segment_element(\"medium\",\r\n                       operator = \"EXACT\",\r\n                       type = \"dimension\",\r\n                       not = TRUE,\r\n                       expressions = \"organic\")\r\n\r\n## step sequence\r\n## users who arrived via organic then via referral\r\nsv_sequence <- segment_vector_sequence(list(list(se2), \r\n                                             list(se3)))\r\n\r\nseq_defined2 <- segment_define(list(sv_sequence))\r\n\r\nsegment4_seq <- segment_ga4(\"sequence\", user_segment = seq_defined2)\r\n\r\n## Add the segments to the segments param\r\nsegment_seq_example <- google_analytics_4(ga_id, \r\n                                          c(\"2016-04-01\",\"2016-05-01\"), \r\n                                          dimensions=c('source','segment'), \r\n                                          segments = segment4_seq,\r\n                                          metrics = c('sessions','bounces')\r\n                                          )\r\nsegment_seq_example\r\n#                                source  segment sessions bounces\r\n# 1                                 aol sequence        1       0\r\n# 2                                 ask sequence        5       1\r\n# 3      bestbackpackersinsurance.co.uk sequence        9       6\r\n# 4                                bing sequence       22       2\r\n```\r\n\r\n### Cohort reports\r\n\r\nDetails on [cohort reports and LTV can be found here](https://developers.google.com/analytics/devguides/reporting/core/v4/advanced#cohorts).\r\n\r\n```r\r\n## first make a cohort group\r\ncohort4 <- make_cohort_group(list(\"cohort 1\" = c(\"2015-08-01\", \"2015-08-01\"), \r\n                                \"cohort 2\" = c(\"2015-07-01\",\"2015-07-01\")))\r\n\r\n## then call cohort report.  No date_range and must include metrics and dimensions\r\n##   from the cohort list\r\ncohort_example <- google_analytics_4(ga_id, \r\n                                     dimensions=c('cohort'), \r\n                                     cohort = cohort4, \r\n                                     metrics = c('cohortTotalUsers'))\r\n\r\ncohort_example\r\n#     cohort cohortTotalUsers\r\n# 1 cohort 1               14\r\n# 2 cohort 2               20\r\n\r\n```\r\n\r\n### Pivot Requests\r\n\r\n\r\n```r\r\n\r\n## filter pivot results to \r\npivot_dim_filter1 <- dim_filter(\"medium\",\r\n                                \"REGEXP\",\r\n                                \"organic|social|email|cpc\")\r\n                                \r\npivot_dim_clause <- filter_clause_ga4(list(pivot_dim_filter1))\r\n\r\npivme <- pivot_ga4(\"medium\",\r\n                   metrics = c(\"sessions\"), \r\n                   maxGroupCount = 4, \r\n                   dim_filter_clause = pivot_dim_clause)\r\n\r\npivtest1 <- google_analytics_4(ga_id, \r\n                               c(\"2016-01-30\",\"2016-10-01\"), \r\n                               dimensions=c('source'), \r\n                               metrics = c('sessions'), \r\n                               pivots = list(pivme))\r\n\r\n\r\nnames(pivtest1)\r\n#  [1] \"source\"                      \"sessions\"                    \"medium.referral.sessions\"   \r\n#  [4] \"medium..none..sessions\"      \"medium.cpc.sessions\"         \"medium.email.sessions\"      \r\n#  [7] \"medium.social.sessions\"      \"medium.twitter.sessions\"     \"medium.socialMedia.sessions\"\r\n# [10] \"medium.Social.sessions\"      \"medium.linkedin.sessions\"  \r\n\r\n```\r\n\r\n\r\n## To use - v3 API calls\r\n\r\nv3 API calls are also tried and tested.\r\n\r\nFor syntax of filters and dimensions, this library parses in exactly as specified in the [Google Analytics v3 API docs](https://developers.google.com/analytics/devguides/reporting/core/v3/reference?hl=en#filters), so check those out.  Note you do not need to encode symbols, but may have to encode URLs if you are filtering for those in say ga:pagePath\r\n\r\n```r\r\nlibrary(googleAnalyticsR)\r\n\r\n## Authenticate in Google OAuth2\r\n## this also sets options\r\nga_auth()\r\n\r\n## if you need to re-authenticate use ga_auth(new_user=TRUE)\r\n\r\n## if you have your own Google Dev console project keys, \r\n## then don't run ga_auth() as that will set the authentication project to the defaults.\r\n## instead put your options here, and run googleAuthR::gar_auth()\r\n\r\n## get account info, including View Ids\r\naccount_list <- google_analytics_account_list()\r\nga_id <- account_list$viewId[1]\r\n\r\n## get a list of what metrics and dimensions you can use\r\nmeta <- google_analytics_meta()\r\nhead(meta)\r\n\r\n## pick the account_list$viewId you want to see data for.\r\n## metrics and dimensions can have or have not \"ga:\" prefix\r\ngadata <- google_analytics(id = ga_id, \r\n                           start=\"2015-08-01\", end=\"2015-08-02\", \r\n                           metrics = c(\"sessions\", \"bounceRate\"), \r\n                           dimensions = c(\"source\", \"medium\"))\r\n\r\n## multi accounts, pass character vector of viewIds\r\n## outputs a list of data.frames, named after the viewId\r\nmulti_gadata <- google_analytics(id = c(\"123456\",\"9876545\",\"765432\"), \r\n                                 start=\"2015-08-01\", end=\"2015-08-02\", \r\n                                 metrics = c(\"sessions\", \"bounceRate\"), \r\n                                 dimensions = c(\"source\", \"medium\"))\r\n\r\n## if more than 10000 rows in results, auto batching\r\n## example is setting lots of dimensions to try and create big sampled data\r\nbatch_gadata <- google_analytics(id = account_list$viewId[1], \r\n                                 start=\"2014-08-01\", end=\"2015-08-02\", \r\n                                 metrics = c(\"sessions\", \"bounceRate\"), \r\n                                 dimensions = c(\"source\", \"medium\", \"landingPagePath\",\"hour\",\"minute\"),\r\n                                 max=99999999)\r\n\r\n## mitigate sampling by setting samplingLevel=\"WALK\"\r\n## this will send lots and lots of calls to the Google API limits, beware\r\nwalk_gadata <- google_analytics(id = account_list$viewId[1], \r\n                                start=\"2014-08-01\", end=\"2015-08-02\", \r\n                                metrics = c(\"sessions\", \"bounceRate\"), \r\n                                dimensions = c(\"source\", \"medium\", \"landingPagePath\"), \r\n                                max=99999999, samplingLevel=\"WALK\")\r\n\r\n## multi-channel funnels set type=\"mcf\"\r\nmcf_gadata <- google_analytics(id = account_list$viewId[1], \r\n                               start=\"2015-08-01\", end=\"2015-08-02\", \r\n                               metrics = c(\"totalConversions\"), \r\n                               dimensions = c(\"sourcePath\"), \r\n                               type=\"mcf\")\r\n\r\n## google_analytics dataframes include these meta data attributes:\r\n- attr(*, \"containsSampledData\")= logi FALSE\r\n - attr(*, \"samplePercent\")= num 100\r\n - attr(*, \"samplingLevel\")= chr \"DEFAULT\"\r\n - attr(*, \"profileInfo\")=List of 6\r\n  ..$ profileId            : chr \"535656\"\r\n  ..$ accountId            : chr \"2748374\"\r\n  ..$ webPropertyId        : chr \"UA-278374-1\"\r\n  ..$ internalWebPropertyId: chr \"5279208\"\r\n  ..$ profileName          : chr \"XXXXX\"\r\n  ..$ tableId              : chr \"mcf:539656\"\r\n - attr(*, \"dateRange\")=List of 2\r\n  ..$ startDate: chr \"2015-08-01\"\r\n  ..$ endDate  : chr \"2015-08-02\"\r\n - attr(*, \"totalResults\")= int 4\r\n\r\n## reach meta-data via attr()\r\nattr(gadata, \"profileInfo\")\r\nattr(gadata, \"dateRange\")\r\n\r\n```\r\n## Using your own Google Developer Project API Key\r\n\r\nWith the amount of API calls possible with this library via batching and walking, its more likely the shared\r\nGoogle API project will hit the 50,000 calls per day limit.\r\n\r\nTo mitigate that, use your own [Google Developer Console Project](https://console.developers.google.com/apis/library) key, so it is not shared across all users of this library.\r\n\r\nGet your own OAuth2 clientID and client secret and add to the options like so:\r\n\r\nTODO: guide on how you get your own client Id.\r\n\r\n### Example adding your own Google Developer Console keys\r\n\r\nBelow a new client Id is set for both offline and Shiny use.  Put the lines at the top of your R script with your\r\nown credentials.\r\n\r\nIn this example, the scopes are also set so a user can authenticate with searchConsoleR at the same time, which \r\nis possible as they both use googleAuthR as a backend.\r\n\r\n```r\r\noptions(\"googleAuthR.client_id\" = \"994xxx55706-afliqtuxxxxxxx2fd4kesu6.apps.googleusercontent.com\")\r\noptions(\"googleAuthR.client_secret\" = \"3JhLa_GxxxxxCQYLe31c64\")\r\noptions(\"googleAuthR.scopes.selected\" = c(\"https://www.googleapis.com/auth/analytics\", \r\n                                          \"https://www.googleapis.com/auth/analytics.readonly\", \r\n                                          \"https://www.googleapis.com/auth/webmasters\"))\r\noptions(\"googleAnalyticsR.webapp.client_id\" = \"994xxxx55706-e9qompxxxxx9pcab1u005cv.apps.googleusercontent.com\")\r\noptions(\"googleAnalyticsR.webapp.client_secret\" = \"zcofxxxxxxElemXN5sf\")\r\n```\r\n\r\n\r\n## Shiny\r\n\r\nTo use in Shiny, use the googleAuth `with_shiny`\r\n\r\n```r\r\n\r\n## in server.R\r\nlibrary(googleAuthR)\r\nlibrary(googleAnalyticsR)\r\nlibrary(shiny)\r\n\r\nshinyServer(function(input, output, session){\r\n  \r\n  ## Get auth code from return URL\r\n  access_token  <- reactiveAccessToken(session)\r\n  \r\n  ## Make a loginButton to display using loginOutput\r\n  output$loginButton <- renderLogin(session, access_token(),\r\n                                    logout_class = \"btn btn-danger\")\r\n\r\n  gadata <- reactive({\r\n\r\n    gadata <- with_shiny(google_analytics,\r\n                         id = \"222222\",\r\n                         start=\"2015-08-01\", end=\"2015-08-02\", \r\n                         metrics = c(\"sessions\", \"bounceRate\"), \r\n                         dimensions = c(\"source\", \"medium\"),\r\n                         shiny_access_token = access_token())\r\n\r\n})\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}